This directory holds files that contain assembler and other code that is 
specific to particular architectures.  In general the type of the file
is set by its extension and its specific function is set by its name in 
a way that is described below.

1. Usage
========

The aim is to have generic C code enhanced as necessary with architecture
specific alternatives including assembler code.  To achieve this each
distinct function in the C source code files in the BSDNT root directory
uses of defines of the form:

  HAVE_ARCH_<bsdnt_function>

that exclude the function from compilation if this symbol is defined. 
(angle brackets <> are used here to indicate where specific function
names are substituted - without the <>).  When such a symbol is defined,
it mmeans that the function in question has an architecture specific 
version in the arch directory that should be used instead of the version
in the root directory.  This alternative can implemented in C or assembler
that should be used instead of the C code version.  Hence, for example, 
the existence of the define:

  HAVE_ARCH_nn_add_mc

means that the C function calleld nn_add_mc in the root directory source
code should be excluded when the file that contains it is compiled. 
 
To achieve this exclusion, the generic C file <bsd_function_category>.c 
expects to find a file <bsd_function_category>_arch.h in the BSDNT root
directory that contains all the HAVE_ARCH_<bsdnt_function> defines for 
the architecture that is being built.  Hence, for example, the file 
implementing the linear arithmetic functions:

  nn_linear.c 

will expect to find the file:

  nn_linear_arch.h

in the root directory speciifying which functions should not be compiled.
It is the responsibility of the build system for the architecture in
question to create or copy such a file into this location before the
build is started.

2. Architeture Specific Files
=============================

Files specific to each architecture are all placed in the arch directory
and are distinguished by the following file naming conventions. The 
template for the adopted naming convention is:

  <bsdnt_function_category>_<operating system>.(c|h)
  
The function categories are, for example,

  nn_linear     basic multiple length code with linear timing
  nn_quadratic  basic multiple length code with quadratic timing

and the operating system categories so far identified are:

  x86      32-bit *nix systems 
  x86_64   64-bit *nix systems
  win32    32-bit Windows systems
  x64      64-bit Windows systems

So, for example, these files:

  nn_linear_x64.h
  nn_linear_x64.c

are the header and source code files for alternative linear functions
for Windows x64 systems.  The header function simply deines symbols to
prevent the root source code for a function being compiled while the 
C file contains the architecture specific versions of these excluded
functions. For example the content of the header file will have the 
form:

#define HAVE_ARCH_nn_shl_c
#define HAVE_ARCH_nn_shr_c
#define HAVE_ARCH_nn_add1
#define HAVE_ARCH_nn_sub1
#define HAVE_ARCH_nn_neg_c

and nn_linear.c has the include:

#include "nn_linear_arch..h"

which picks up the compiler exclusions. So, prior to starting the
compilation, the build system for, say, WIndows x64 will copy the 
file arch/nn_linear_x64.h to nn_linear_arch.h in root to force the
exclusions that are needed on this architecture.

3. Architeture Specific Assembler Code
======================================

If assembler code version of routines are available for any architecture
are available, they reside within a directory in the arch directory with
the directory name set by the operating system for which the assembler
is available.  So for the operating systems identfied earlier, the code
for any assembler will reside in:

  arch/x86      32-bit *nix systems assembler
  arch/x86_64   64-bit *nix systems assembler
  arch/win32    32-bit Windows systems assembler
  arch/x64      64-bit Windows systems assembler

How the assembler code is organised within these directories is not fixed
and will depend on the most appropriate organisation for the operating
system in particular.  For example, in the x64 directory, the files:

  nn_linear_x64_core2.h
  nn_linear_x64_k8.h

are the header files for core2 and k8 assembler code respectively, with

  nn_linear_x64_core2.asm
  nn_linear_x64_k8.asm

holding the assembler implementations.

If an assembler version is available it has to overide any version in
the BSDNT root directory and any architecture specific version in arch.
To achieve this, using the x64 assembler code for the linear functions
on ccore2 systems as an example, the file:

   arch/x64/nn_linear_x64_core2.h

is first copied into:

   arch/nn_linear_x64_asm.h

where it will be picked up by the file nn_linear_x64.c using an include:

#include "nn_linear_x64_asm.h"

which will exclude the compilation of any architecture specific versions
for which assembler code is available.

Any assembler code must also cause exclusions in nn_linear.c in root and
this is achieved by appending the file 'nn_linear_x64_asm.h' (now in arch
as a result of the earlier copying operation) to 'nn_linear_x64.h' and
copying the result to 'nn_linear_arch.h' in root.

So to build for x64 using the core2 assembler code, the two pre-build
copying steps are:

  copy  arch/x64/nn_linear_x64_core2.h  arch/nn_linear_x64_asm.h
  copy  arch/nn_linear_x64.h + arch/nn_linear_x64_asm.h  nn_linear_arch.h

and arrange to build:
  
  nn_linear.c
  arch/nn_linear_x64.c
  arch/x64/nn_linear_x64_core2.asm

The same hierarchy applies to nn_quadratic.c and to any other root level
code for which architecture specific or assembler code alternatives are
available.
